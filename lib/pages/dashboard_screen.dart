import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:project/provider/order_history_provider.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ provider ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({Key? key}) : super(key: key);

  @override
  _DashboardScreenState createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  String _selectedPeriod = '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  Map<String, dynamic> summaryData = {};

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _updateSummary();
  }

  void _updateSummary() {
    final orderHistory = Provider.of<OrderHistoryProvider>(context, listen: false);

    setState(() {
      if (_selectedPeriod == '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô') {
        summaryData = orderHistory.getTodaySummary();
      } else if (_selectedPeriod == '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô') {
        summaryData = orderHistory.getMonthlySummary();
      } else if (_selectedPeriod == '‡∏£‡∏≤‡∏¢‡∏õ‡∏µ') {
        summaryData = orderHistory.getYearlySummary();
      }
    });
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dashboard ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢'),
        backgroundColor: Colors.green,
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á $_selectedPeriod',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                DropdownButton<String>(
                  value: _selectedPeriod,
                  onChanged: (String? newValue) {
                    if (newValue != null) {
                      setState(() {
                        _selectedPeriod = newValue;
                        _updateSummary(); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                      });
                    }
                  },
                  items: ['‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏£‡∏≤‡∏¢‡∏õ‡∏µ']
                      .map<DropdownMenuItem<String>>(
                        (String value) => DropdownMenuItem<String>(
                          value: value,
                          child: Text(value),
                        ),
                      )
                      .toList(),
                ),
              ],
            ),
            SizedBox(height: 10),
            Text(
              'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ ($_selectedPeriod)',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 10),
            // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
            Card(
              color: Colors.green[100],
              child: ListTile(
                title: Text('üõç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${summaryData['totalOrders']} ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå'),
                subtitle: Text('ü•§ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢: ${summaryData['totalItemsSold']} ‡πÅ‡∏Å‡πâ‡∏ß'),
                trailing: Text(
                  'üí∞ ‡∏£‡∏ß‡∏°‡πÄ‡∏á‡∏¥‡∏ô: ${summaryData['totalRevenue'].toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ),
            ),
            SizedBox(height: 20),
            Text(
              'üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢:',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢
            Expanded(
              child: summaryData['itemsCount'].isEmpty
                  ? Center(child: Text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ $_selectedPeriod"))
                  : ListView(
                      children: summaryData['itemsCount']
                          .entries
                          .map<Widget>((entry) {
                        String itemName = entry.key;
                        String itemDate = summaryData['itemsDate'][itemName] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'; // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å itemsDate

                        return ListTile(
                          title: Text(itemName),
                          subtitle: Text('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢: $itemDate'), // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                          trailing: Text('üõí ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${entry.value} ‡∏ä‡∏¥‡πâ‡∏ô'),
                        );
                      }).toList(),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}
